__interface "Main" VM 31 [23 1] 0 where
__export  VM VMzu primThrow vmcreate vmcurrClass vmcurrMeth vmgetClass vmgetCurrClass vmgetHeap vmgetMA vmgetPC vmgetStack vminvoke vmloop vmmain vmpop vmpush vmreplaceClass vmreturn vmsetHeap vmsetMA vmsetPC vmsetStack zuquickNewStr zuvmnewArray zuvmnewObj zuvmsolveClassRef zuvmsolveFieldRef zuvmsolveIMethodRef zuvmsolveMethodRef;
import PrelReal;
import PrelEnum;
import PrelIO;
import VMNode;
import Int;
import Char;
import PrelException;
import IO;
import Array;
import PrelBits;
import BitUtils;
import System;
import PrelHandle;
import PrelDynamic;
import ClassParser;
import OpenFile;
import CoreClasses;
import CustomClasses;
import OpDefs;
import BasicOps;
import ArrayOps;
import ArithOps;
import BranchOps;
import VMOps;
import WideOps;
import ClassLoader :: 19 14 1 solveClassRef 1;
import RefSolver :: 24 20 1 solveFieldRef 1 solveIMethodRef 1 solveMethodRef 1;
import ClassInit :: 3 3 1 initializze 1;
import ClassRep :: 63 55 1 AccPerm 1 CP 1 CPEntry 1 CPIx 1 CStat 1 Class 1 ClassElem 1 ClassRef 1 EInfo 1 FInfo 1 MInfo 1 Offset 1 Ref 1 RefKind 1 VTbl 1 getCP 1 getCode 1 getETbl 1 getInstanceFields 1 getName 1 getStaticMethods 1 isAbstract 1 isInterface 1 newRef 1 pathToRoot 1 pathToRootCls 1 prepareField 1 zdfClassElemFInfo 1 zdfClassElemMInfo 1 zdfEqMInfo 1 zdfShowCPEntry 1 zdfShowClass 1 zdfShowClassRef 1 zdfShowEInfo 1 zdfShowFInfo 1 zdfShowMInfo 1 zlz64Uzg 1;
import VMMonad :: 6 6 1 VM 1 getS 1 handle 1 inject 1 raise 1 setS 1 zdfMonadVM 1;
import VMStack :: 11 8 1 Frame 1 Ops 1 Stack 1 Vars 1 addVars 1 clearOps 1 emptyStack 1 getMAIx 1 getMInfo 1 getPC 1 newFrame 1 newStack 1 popFrame 1 popOp 1 pushFrame 1 pushOp 1 topFrame 1 unwind 1 zdfShowFrame 1;
import VMIntp :: 7 5 1 vmintp 1;
import VMHeap :: 8 8 1 Heap 1 Obj 1 Ptr 1 VMNode 1 allocH 1 arrayObj 1 heapObj 1 newH 1 zdfShowHeap 1 zdfShowObj 1 zdfShowVMNode 1;
import VMErr :: 15 15 1 Error 1 VMErr 1 getErrorRef 1 instantiationErr 1 negativeArraySizzeException 1 zdfEqError 1 zdfShowError 1 zdfShowVMErr 1;
import MA :: 11 8 1 MA 1 MAIx 1 getClass 1 newMA 1 replaceClass 1;
import Monad :: 1;
import Maybe :: 1;
import List :: 1;
import PrelBase ! :: 1;
import PrelNum :: 1;
import PrelTup :: 1;
import PrelIOBase :: 1;
import PrelShow :: 1;
import PrelArr :: 1;
import PrelList :: 1;
import PrelInt :: 1;
import PrelMaybe :: 1;
import Bits !;
;
instance {PrelShow.Show VMDef} = zdfShowVMDef ;
vmloop :: VMzu ();
vmmain :: PrelBase.String -> [PrelBase.String] -> VMzu ();
zuquickNewStr :: PrelBase.String -> VMzu VMHeap.Ptr;
vmreturn :: PrelBase.Bool -> VMzu ();
vminvoke :: MA.MAIx -> ClassRep.MInfo -> [VMHeap.VMNode] -> VMzu ();
primThrow :: MA.MAIx -> VMHeap.Ptr -> VMzu ();
zuvmnewArray :: PrelMaybe.Maybe ClassRep.Class -> ClassRep.ClassRef -> PrelBase.Int -> VMzu (MA.MAIx, VMHeap.Ptr);
zuvmnewObj :: PrelMaybe.Maybe ClassRep.Class -> ClassRep.ClassRef -> VMzu (MA.MAIx, VMHeap.Ptr);
zuvmsolveIMethodRef :: ClassRep.Class -> ClassRep.ClassRef -> ClassRep.Ref -> VMzu (MA.MAIx, ClassRep.Offset);
zuvmsolveMethodRef :: ClassRep.Class -> ClassRep.ClassRef -> ClassRep.Ref -> VMzu (MA.MAIx, ClassRep.Offset);
zuvmsolveFieldRef :: ClassRep.Class -> ClassRep.ClassRef -> ClassRep.Ref -> VMzu (MA.MAIx, ClassRep.Offset);
zuvmsolveClassRef :: PrelMaybe.Maybe ClassRep.Class -> ClassRep.ClassRef -> VMzu (MA.MAIx, ClassRep.Class);
vmpop :: VMzu VMStack.Frame;
vmpush :: VMStack.Frame -> VMzu ();
vmreplaceClass :: MA.MAIx -> ClassRep.Class -> VMzu ();
vmgetCurrClass :: VMzu (MA.MAIx, ClassRep.Class);
vmgetClass :: MA.MAIx -> VMzu ClassRep.Class;
vmcurrClass :: VMDef -> (MA.MAIx, ClassRep.Class);
vmcurrMeth :: VMDef -> ClassRep.MInfo;
vmsetPC :: VMDef -> (PrelBase.Int -> PrelBase.Int) -> VMDef;
vmgetPC :: VMDef -> PrelBase.Int;
vmgetStack :: VMDef -> VMStack.Stack;
vmsetStack :: VMDef -> VMStack.Stack -> VMDef;
vmgetHeap :: VMDef -> VMHeap.Heap VMHeap.Obj;
vmsetHeap :: VMDef -> VMHeap.Heap VMHeap.Obj -> VMDef;
vmgetMA :: VMDef -> MA.MA;
vmsetMA :: VMDef -> MA.MA -> VMDef;
vmcreate :: VMDef;
data VMDef = VMDef MA.MA (VMHeap.Heap VMHeap.Obj) VMStack.Stack PrelBase.Int [(PrelBase.String, VMHeap.Ptr)];
type VMzu a = VMMonad.VM VMDef a;
zdfShowVMDef :: {PrelShow.Show VMDef};
